
#include<bits/stdc++.h>
using namespace std;
  
//This creates a shortcut for an integer pair and defines how they will
//be inputed
typedef  pair<int, int> iPair;
  
// Structure to represent the graph.
//I wanted to create a sperate file for the graph but just 
//was unable to make it work
struct Graph
{
//Nodes and edges
    int N, E;
    vector< pair<int, iPair> > edges;
  
//Graph constructor
    Graph(int N, int E)
    {
        this->N = N;
        this->E = E;
    }
  
// Utility function to add an edge. This take the 
//node its from(u) the node it's going to (v) and the weight of the edge
    void addEdge(int u, int v, int w)
    {
        edges.push_back({w, {u, v}});
    }
  
//Function to find MST using Kruskal's
//MST algorithm
    int kruskalMST();
};
//To represent Disjoint Sets
struct DisjointSets
{
    int *parent, *rnk;
    int n;
  
//Constructor.
    DisjointSets(int n)
    {
//Takes the memory
        this->n = n;
        parent = new int[n+1];
        rnk = new int[n+1];
  
//Initially, all vertices are in different sets and have rank 0.
//This sets a good starting point and 
//acts as a test to make sure no initial values are stored
        for (int i = 0; i <= n; i++)
        {
            rnk[i] = 0;
  
//Every element is a parent of itself
            parent[i] = i;
        }
    }
  
//Find the parent of a node (u) and find the shortest path
    int find(int u)
    {
 
        if (u != parent[u])
            parent[u] = find(parent[u]);
        return parent[u];
    }
  
//Rank the edges
    void merge(int x, int y)
    {
        x = find(x), y = find(y);
  
//Make tree with smaller height a subtree of the other tree
        if (rnk[x] > rnk[y])
            parent[y] = x;
        else 

            parent[x] = y;
  
        if (rnk[x] == rnk[y])
            rnk[y]++;
    }
};
  
//Functions returns weight of the MST
  
int Graph::kruskalMST()
{
    int mst_wt = 0; 
//Initialize result
  
//Sort edges in increasing order on basis of cost
    sort(edges.begin(), edges.end());
  
//Create disjoint sets
    DisjointSets ds(N);
  
//Iterate through all sorted edges
    vector< pair<int, iPair> >::iterator it;
    for (it=edges.begin(); it!=edges.end(); it++)
    {
        int u = it->second.first;
        int v = it->second.second;
  
        int set_u = ds.find(u);
        int set_v = ds.find(v);
  
//Check if the selected edge is creating
//a cycle or not. Acts as a test
        if (set_u != set_v)
        {
//Current edge will be in the MST

            cout << u << " - " << v << endl;
  
//Update the weight of the MST
            mst_wt += it->first;
  
//Merge the two sets
            ds.merge(set_u, set_v);
        }
    }
  
    return mst_wt;
}
  
//Driver program to test above functions
int main()
{
//Let us create above shown weight
    int V = 9, N = 14;
    Graph g(V, N);
  
//making above shown graph
    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);

//Print the different edges that we have created
    cout << "Edges of MST are \n";
    int mst_wt = g.kruskalMST();

//Print the total weight of the calculated MST
    cout << "\nWeight of MST is " << mst_wt;
  
    return 0;
}
